#include <Arduino.h>

byte line_error_code = 0, table_error_code = 11, sw01 = 0, sw02 = 0;
byte sensor[7] = {0, 0, 0, 0, 0, 0, 0};
void read_sensor_values(void);
void main_Control(void);
void motor_output();
void check_table(void);
void check(void);

// Line sensor Input
#define sensor01 A1
#define sensor02 A2
#define sensor03 A3
#define sensor04 A4
#define sensor05 A5
// Line sensor Input

// Table sensor Input
#define table_sensor01 A6
#define table_sensor02 A7
// Table sensor Input

// select Table  Button
#define table01 10
#define table02 11
// select Table  Button

#define TriggerPin 14
#define EchoPin 15
long Duration;
int Distance;
//Untrasonic

// Output
#define pwm_2 2
#define motorR 3
#define pwm_1 4
#define motorL 5
// Output

void motor_output(int _PWM_1, int _PWM_2, int _MotorL, int _MotorR)
{
    analogWrite(pwm_1, _PWM_1);
    analogWrite(pwm_2, _PWM_2);
    analogWrite(motorL, _MotorL);
    analogWrite(motorR, _MotorR);
}

void setup()
{
    Serial.begin(115200);

    pinMode(pwm_1, OUTPUT);
    pinMode(pwm_2, OUTPUT);
    pinMode(motorL, OUTPUT);
    pinMode(motorR, OUTPUT);
    // Line sensor Input
    pinMode(sensor01, INPUT);
    pinMode(sensor02, INPUT);
    pinMode(sensor03, INPUT);
    pinMode(sensor04, INPUT);
    pinMode(sensor05, INPUT);
    // Line sensor Input

    // Table sensor Input
    pinMode(table_sensor01, INPUT);
    pinMode(table_sensor02, INPUT);
    // Table sensor Input

    // select Table button
    pinMode(table01, INPUT);
    pinMode(table02, INPUT);
    // select Table button

    //Untrasonic
    pinMode(TriggerPin, OUTPUT);
    pinMode(EchoPin, INPUT);
    //Untrasonic
}

void loop()
{
    sw01 = digitalRead(table01);
    sw02 = digitalRead(table02);
    Serial.print("table_error_code : ");
    Serial.println(table_error_code);
    while (sw01 == HIGH && sw02 == LOW && table_error_code != 01)
    {
        sensor[5] = digitalRead(table_sensor02);
        if (sensor[5] == HIGH)
        {
            Serial.println("sensor[5]*****-*-");
            sw01 = 0;
            table_error_code = 01;
            motor_output(0, 0, 0, 0);
            break;
        }
        read_sensor_values();
        main_Control();
    }
    while (sw01 == LOW && sw02 == HIGH && table_error_code != 10)
    {
        sensor[6] = digitalRead(table_sensor01);
        if (sensor[6] == HIGH)
        {
            Serial.println("sensor[6]*****-*-");
            sw02 = 0;
            table_error_code = 10;
            motor_output(0, 0, 0, 0);
            break;
        }
        read_sensor_values();
        main_Control();
    }
    while (sw01 == HIGH && sw02 == HIGH && table_error_code != 00)
    {
        sensor[5] = digitalRead(table_sensor02);
        sensor[6] = digitalRead(table_sensor01);
        if (sensor[5] == HIGH && sensor[6] == HIGH)
        {
            Serial.println("sensor[5+6]*****-*-");
            sw01 = 0;
            sw02 = 0;
            table_error_code = 00;
            delay(800);
            motor_output(0, 0, 0, 0);
            break;
        }
        read_sensor_values();
        main_Control();
    }
}

void check_table()
{
    sensor[5] = digitalRead(table_sensor01);
    sensor[6] = digitalRead(table_sensor02);

    if ((sensor[6] == 0) && (sensor[5] == 0))
    {
        table_error_code = 1;
    }
    else if ((sensor[6] == 0) && (sensor[5] == 1))
    {
        table_error_code = 2;
    }
    else if ((sensor[6] == 1) && (sensor[5] == 0))
    {
        table_error_code = 3;
    }
    else if ((sensor[6] == 1) && (sensor[5] == 1))
    {
        table_error_code = 4;
    }
}

void read_sensor_values()
{
    sensor[0] = digitalRead(sensor01);
    sensor[1] = digitalRead(sensor02);
    sensor[2] = digitalRead(sensor03);
    sensor[3] = digitalRead(sensor04);
    sensor[4] = digitalRead(sensor05);

    if ((sensor[4] == 0) && (sensor[3] == 0) && (sensor[2] == 0) && (sensor[1] == 0) && (sensor[0] == 0))
    {
        line_error_code = 31;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 1) && (sensor[2] == 1) && (sensor[1] == 1) && (sensor[0] == 0))
    {
        line_error_code = 17;
    }
    else if ((sensor[4] == 1) && (sensor[3] == 1) && (sensor[2] == 1) && (sensor[1] == 1) && (sensor[0] == 1))
    {
        line_error_code = 0;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 1) && (sensor[2] == 1) && (sensor[1] == 0) && (sensor[0] == 0))
    {
        line_error_code = 19;
    }
    else if ((sensor[4] == 1) && (sensor[3] == 1) && (sensor[2] == 1) && (sensor[1] == 0) && (sensor[0] == 0))
    {
        line_error_code = 3;
    }
    else if ((sensor[4] == 1) && (sensor[3] == 1) && (sensor[2] == 0) && (sensor[1] == 0) && (sensor[0] == 0))
    {
        line_error_code = 7;
    }
    else if ((sensor[4] == 1) && (sensor[3] == 0) && (sensor[2] == 0) && (sensor[1] == 0) && (sensor[0] == 0))
    {
        line_error_code = 15;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 0) && (sensor[2] == 1) && (sensor[1] == 1) && (sensor[0] == 0))
    {
        line_error_code = 25;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 0) && (sensor[2] == 1) && (sensor[1] == 1) && (sensor[0] == 1))
    {
        line_error_code = 24;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 0) && (sensor[2] == 0) && (sensor[1] == 1) && (sensor[0] == 1))
    {
        line_error_code = 28;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 0) && (sensor[2] == 0) && (sensor[1] == 0) && (sensor[0] == 1))
    {
        line_error_code = 30;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 1) && (sensor[2] == 1) && (sensor[1] == 1) && (sensor[0] == 1))
    {
        line_error_code = 16;
    }
    else if ((sensor[4] == 1) && (sensor[3] == 1) && (sensor[2] == 1) && (sensor[1] == 1) && (sensor[0] == 0))
    {
        line_error_code = 1;
    }
    else if ((sensor[4] == 0) && (sensor[3] == 0) && (sensor[2] == 1) && (sensor[1] == 0) && (sensor[0] == 0))
    {
        line_error_code = 4;
    }
}
void main_Control()
{
    if (line_error_code == 17)
    {
        motor_output(45, 45, 255, 255);
    }
    else if (line_error_code == 4)
    {
        motor_output(45, 45, 255, 255);
    }
    else if (line_error_code == 3)
    {
        motor_output(40, 0, 255, 0);
    }
    else if (line_error_code == 7)
    {
        motor_output(50, 0, 255, 0);
    }
    else if (line_error_code == 15)
    {
        motor_output(70, 20, 255, 0);
    }
    else if (line_error_code == 19)
    {
        motor_output(30, 0, 255, 0);
    }
    else if (line_error_code == 24)
    {
        motor_output(0, 40, 0, 255);
    }
    else if (line_error_code == 25)
    {
        motor_output(0, 30, 0, 255);
    }
    else if (line_error_code == 28)
    {
        motor_output(0, 50, 0, 255);
    }
    else if (line_error_code == 30)
    {
        motor_output(20, 70, 0, 255);
    }
    else if (line_error_code == 31)
    {
        motor_output(30, 30, 0, 0);
    }
    else if (line_error_code == 1)
    {
        motor_output(20, 70, 0, 255);
    }
    else if (line_error_code == 16)
    {
        motor_output(70, 20, 255, 0);
    }
    else if (line_error_code == 0)
    { // line_error_code code:Stop
        motor_output(0, 0, 0, 0);
    }
}
void check()
{
    digitalWrite(TriggerPin, HIGH);
    digitalWrite(TriggerPin, LOW);
    Duration = pulseIn(EchoPin, HIGH);
    Distance = Duration * 0.034 / 2;
}